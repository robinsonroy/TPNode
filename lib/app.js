// Generated by CoffeeScript 1.11.1
(function() {
  var app, authCheck, bodyparser, express, levelStore, metrics, morgan, nib, session, stylus, user;

  express = require('express');

  session = require('express-session');

  levelStore = require('level-session-store')(session);

  metrics = require('./metrics');

  user = require('./user');

  morgan = require('morgan');

  bodyparser = require('body-parser');

  stylus = require('stylus');

  nib = require('nib');

  app = express();

  app.use(morgan('dev'));

  app.use(stylus.middleware({
    src: __dirname + '/../stylesheets',
    dest: __dirname + '/../public/css',
    compile: function(str, path) {
      return stylus(str).set('filename', path).set('compress', true).use(nib())["import"]('nib');
    }
  }));

  app.use(bodyparser.json());

  app.use(bodyparser.urlencoded({
    extended: true
  }));

  app.set('port', 1337);

  app.use(session({
    secret: 'metricsApp',
    store: new levelStore('./db/session'),
    resave: true,
    saveUninitialized: true
  }));

  authCheck = function(req, res, next) {
    console.log("Auth Check for " + req.session.username);
    if (req.session.username) {
      console.log("Auth check ok");
      return next();
    } else {
      console.log("Auth check nok");
      return res.redirect('/login');
    }
  };

  app.set('view engine', 'pug');

  app.set('views', __dirname + "/../views");

  app.use('/', express["static"](__dirname + "/../public"));

  app.get('/login', function(req, res) {
    var base;
    console.log("Login Error : " + req.query.error);
    return res.render('login', {
      error: (base = req.query).error != null ? base.error : base.error = ''
    });
  });

  app.post('/login', function(req, res) {
    return user.get(req.body.username, req.body.password, function(err, value) {
      if (err) {
        req.params.error = err;
        return res.redirect('/login' + '/?error=' + err);
      } else {
        req.session.loggedIn = true;
        req.session.username = value.username;
        return res.redirect('/');
      }
    });
  });

  app.get('/logout', authCheck, function(req, res) {
    console.log("Logout of " + req.session.username);
    delete req.session.loggedIn;
    delete req.session.username;
    return res.redirect('/');
  });

  app.get('/signup', function(req, res) {
    var base;
    return res.render('signup', {
      error: (base = req.query).error != null ? base.error : base.error = ''
    });
  });

  app.post('/signup', function(req, res) {
    return user.save(req.body.username, req.body.name, req.body.password, req.body.email, function(err) {
      if (err) {
        req.params.err = err;
        return res.redirect('/signup');
      } else {
        console.log("Signup secess");
        req.session.loggedIn = true;
        req.session.username = req.body.username;
        return res.redirect('/');
      }
    });
  });

  app.get('/', authCheck, function(req, res) {
    var base;
    return res.render('app', {
      metric_error: (base = req.query).metric_error != null ? base.metric_error : base.metric_error = ''
    });
  });

  app.post('/metrics.json', authCheck, function(req, res) {
    var metricsJson;
    metricsJson = req.body;
    return metrics.save(req.session.username, metricsJson, function(err) {
      if (err) {
        console.log("error" + err);
        req.params.metric_error = err;
        return res.redirect('/');
      } else {
        return res.redirect('/');
      }
    });
  });

  app.listen(app.get('port'), function() {
    return console.log("listen on port " + (app.get('port')));
  });

}).call(this);
